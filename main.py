import logging

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy.orm import sessionmaker
from telegram import *
from telegram.ext import *

import config

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

engine = create_async_engine(config.DB_DSN)


async def unknown(update: Update, context: CallbackContext.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í–∏–±–∞—á—Ç–µ, —è –≤–∞—Å –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ :(")


async def start(update: Update, context: CallbackContext):
    print("def start this is context.user.data", context.user_data)
    buttons = [
        [KeyboardButton("–ú–µ–Ω—é –ó–∞–∫–ª–∞–¥—É")],
        [KeyboardButton("–®–æ –º–µ–Ω—ñ –≤–∏–ø–∏—Ç–∏?")],
        [KeyboardButton("–ó–ê–ë–†–û–ù–Æ–í–ê–¢–ò –°–ê–ú–û–°–ò!")],
    ]
    reply_markup = ReplyKeyboardMarkup(buttons)
    text = "–í—ñ—Ç–∞—î–º–æ –≤ –î—ñ–¥–∂–∏—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–º—É –ú—É—Å–∫–∞—Ç—ñ"
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=text,
                                   reply_markup=reply_markup)


async def menu(update: Update, context: CallbackContext.DEFAULT_TYPE):
    context.user_data['is_menu'] = True
    if context.user_data.get("is_menu"):
        buttons = [
            [KeyboardButton("–ù–∞–ø–æ—ó")],
            [KeyboardButton("–î–µ—Å–µ—Ä—Ç–∏")],
            [KeyboardButton("üè†")],
        ]
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:",
                                       reply_markup=ReplyKeyboardMarkup(buttons))
    elif context.user_data.get('is_random'):
        ...
    else:
        return await start(update, context)


async def random(update: Update, context: CallbackContext.DEFAULT_TYPE):
    context.user_data['is_random'] = True
    buttons = [
        [KeyboardButton("–ì–æ—Ç–æ–≤–∏–π")],
        [KeyboardButton("üè†")]
    ]
    text = '''
        –ü–µ—Ä–µ–¥ —Ç–æ–±–æ—é —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –î–Ü–î–ñ–ò–¢–ê–õ–Ü–ó–û–í–ê–ù–ò–ô –±–∞—Ä–∏—Å—Ç–∞.
        –Ø–∫—â–æ —Ç–∏ –≤—Ç–æ–º–∏–≤—Å—è –≤—ñ–¥ –º—É–∫ –≤–∏–±–æ—Ä—É:
        ‚Äî"–©–æ –∂ –º–µ–Ω—ñ –≤–∏–ø–∏—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ"
        –ê–±–æ —Ö–æ—á–µ—à—å –ø–æ—î–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç—É–≤–∞—Ç–∏ —Ç–æ u're welcome!
        –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É —Ç–∏—Å–Ω–∏ –Ω–∞ üè†
        '''

    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=text,
                                   reply_markup=ReplyKeyboardMarkup(buttons))


async def drinks(update: Update, context: CallbackContext.DEFAULT_TYPE):
    print('def drinks')
    print(context.user_data)
    if context.user_data.get("is_menu"):
        context.user_data["is_cold"] = None
        buttons = [
            [KeyboardButton("–¢–∞–∫")],
            [KeyboardButton("–ù—ñ")],
            [KeyboardButton("üè†")]
        ]
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–¢–æ–±—ñ —Å–ø–µ–∫–æ—Ç–Ω–æ:",
                                       reply_markup=ReplyKeyboardMarkup(buttons))
    elif context.user_data.get('is_random'):
        context.user_data["is_cold"] = None
        buttons = [
            [KeyboardButton("–¢–∞–∫")],
            [KeyboardButton("–ù—ñ")],
            [KeyboardButton("üè†")]
        ]
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–¢–æ–±—ñ —Å–ø–µ–∫–æ—Ç–Ω–æ:",
                                       reply_markup=ReplyKeyboardMarkup(buttons))
    else:
        return await start(update, context)


async def query_menu_items(sql_query):
    async_session = sessionmaker(
        engine, expire_on_commit=False, class_=AsyncSession
    )

    result = []
    async with async_session() as session:
        r = await session.execute(sql_query)
        results_as_dict = r.mappings().all()
        for el in results_as_dict:
            card = f'–ù–∞–∑–≤–∞: {(el["name"])}\n–¶—ñ–Ω–∞: {(el["price"])}\n'
            result.append(card)

    return result


async def coffee(update: Update, context: CallbackContext):
    print('def coffee', context.user_data["is_cold"])
    if update.message['text'] == '–¢–∞–∫':
        context.user_data["is_cold"] = True
        print('this is true')
    elif update.message['text'] == '–ù—ñ':
        context.user_data["is_cold"] = False
        print('this is false')
    if context.user_data.get("is_menu"):
        buttons = [
            [KeyboardButton("–ö–∞–≤–∞")],
            [KeyboardButton("–Ü–Ω—à–µ")],
            [KeyboardButton("üè†")],
        ]

        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–ö–∞–≤–∞ —á–∏ –Ω–µ –ö–∞–≤–∞:",
                                       reply_markup=ReplyKeyboardMarkup(buttons))
    elif context.user_data.get('is_random'):
        buttons = [
            [KeyboardButton("–ö–∞–≤–∞")],
            [KeyboardButton("–Ü–Ω—à–µ")],
            [KeyboardButton("üè†")],
        ]

        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–ö–∞–≤–∞ —á–∏ –Ω–µ –ö–∞–≤–∞:",
                                       reply_markup=ReplyKeyboardMarkup(buttons))
    else:
        return await start(update, context)


# defaults = {
#     'parent_id': None,
# }
def build_random_item_query(options):
    sql = 'SELECT * FROM menu_item where '
    conditions = []

    for k, v in options.items():
        if v is None:
            s = "is NULL"
        elif v is True:
            s = "= True"
        else:
            s = "= False"
        conditions.append(f'{k} {s}')
    return sql + ' AND '.join(conditions) + ' ORDER BY RANDOM() LIMIT 1'


def build_menu_item_query(options):
    sql = 'SELECT * FROM menu_item where '
    conditions = []

    for k, v in options.items():
        if v is None:
            s = "is NULL"
        elif v is True:
            s = "= True"
        else:
            s = "= False"
        conditions.append(f'{k} {s}')
    return sql + ' AND '.join(conditions)


async def coffee_or_not(update: Update, context: CallbackContext.DEFAULT_TYPE):
    print('def coffee+or_not')
    check_data_cold = context.user_data["is_cold"]
    is_coffee = update.message['text'] == '–ö–∞–≤–∞'
    if context.user_data.get('is_menu'):
        buttons = [
            [KeyboardButton("–ú–µ–Ω—é –ó–∞–∫–ª–∞–¥—É")],
            [KeyboardButton("üè†")],
        ]

        print(check_data_cold, is_coffee)

        sql = build_menu_item_query({
            'is_coffee': is_coffee,
            'parent_id': None,
            'is_cold': check_data_cold,
        })
        print("this  is SQL:", sql)
        result = await query_menu_items(sql)

        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="str\n" + "\n".join(result),
                                       reply_markup=ReplyKeyboardMarkup(buttons))

    elif context.user_data.get('is_random'):
        buttons = [
            [KeyboardButton("–ú–µ–Ω—é –ó–∞–∫–ª–∞–¥—É")],
            [KeyboardButton("–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑")],
            [KeyboardButton("üè†")],
        ]

        print(check_data_cold, is_coffee)

        sql = build_random_item_query({
            'is_coffee': is_coffee,
            'is_cold': check_data_cold,
        })
        print("this  is SQL:", sql)
        result = await query_menu_items(sql)

        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="str\n" + "\n".join(result),
                                       reply_markup=ReplyKeyboardMarkup(buttons))
    else:
        return await start(update, context)


if __name__ == '__main__':
    application = ApplicationBuilder().token(config.TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.Regex('üè†'), start))
    application.add_handler(MessageHandler(filters.Regex('–ú–µ–Ω—é –ó–∞–∫–ª–∞–¥—É'), menu))
    application.add_handler(MessageHandler(filters.Regex('–ù–∞–ø–æ—ó'), drinks))
    application.add_handler(MessageHandler(filters.Regex('–ì–æ—Ç–æ–≤–∏–π'), drinks))
    application.add_handler(MessageHandler(filters.Regex('–®–æ –º–µ–Ω—ñ –≤–∏–ø–∏—Ç–∏'), random))
    application.add_handler(MessageHandler(filters.Regex('–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑'), drinks))
    application.add_handler(MessageHandler(filters.Regex('–¢–∞–∫'), coffee))
    application.add_handler(MessageHandler(filters.Regex('–ù—ñ'), coffee))
    application.add_handler(MessageHandler(filters.Regex('–ö–∞–≤–∞'), coffee_or_not))
    application.add_handler(MessageHandler(filters.Regex('–Ü–Ω—à–µ'), coffee_or_not))
    application.add_handler(MessageHandler(filters.Regex('–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é'), menu))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), unknown))

    application.run_polling()
